import unittest
import ghedt.peak_load_analysis_tool as plat
import os

import numpy as np
import pandas as pd
import pygfunction as gt

"""
Unit test the Hybrid time step object.
"""

TESTDATA_FILENAME = os.path.join(os.path.dirname(__file__),
                                 'Atlanta_Office_Building_Loads.csv')


class TestHYTS(unittest.TestCase):

    def setUp(self) -> None:
        hourly_extraction: dict = \
            pd.read_csv(TESTDATA_FILENAME).to_dict('list')
        # Take only the first column in the dictionary
        self.hourly_extraction_ground_loads: list = \
            hourly_extraction[list(hourly_extraction.keys())[0]]

    def test_hybrid_time_step(self):
        hourly_rejection_loads, hourly_extraction_loads = \
            plat.ground_loads.HybridLoad.split_heat_and_cool(
                self.hourly_extraction_ground_loads)

        # Borehole dimensions
        H = 100.  # Borehole length (m)
        D = 2.  # Borehole buried depth (m)
        r_b = 150. / 1000. / 2.  # Borehole radius

        # Pipe dimensions
        r_out = 26.67 / 1000. / 2.  # Pipe outer radius (m)
        r_in = 21.6 / 1000. / 2.  # Pipe inner radius (m)
        s = 32.3 / 1000.  # Inner-tube to inner-tube Shank spacing (m)
        epsilon = 1.0e-6  # Pipe roughness (m)

        # Pipe positions
        # Single U-tube [(x_in, y_in), (x_out, y_out)]
        pos = plat.media.Pipe.place_pipes(s, r_out, 1)

        # Thermal conductivities
        k_p = 0.4  # Pipe thermal conductivity (W/m.K)
        k_s = 2.0  # Ground thermal conductivity (W/m.K)
        k_g = 1.0  # Grout thermal conductivity (W/m.K)

        # Volumetric heat capacities
        rhoCp_p = 1542. * 1000.  # Pipe volumetric heat capacity (J/K.m3)
        rhoCp_s = 2343.493 * 1000.  # Soil volumetric heat capacity (J/K.m3)
        rhoCp_g = 3901. * 1000.  # Grout volumetric heat capacity (J/K.m3)

        # Thermal properties
        # Pipe
        pipe = plat.media.Pipe(pos, r_in, r_out, s, epsilon, k_p, rhoCp_p)
        # Soil
        ugt = 18.3  # Undisturbed ground temperature (degrees Celsius)
        soil = plat.media.Soil(k_s, rhoCp_s, ugt)
        # Grout
        grout = plat.media.Grout(k_g, rhoCp_g)

        # Fluid properties
        fluid = gt.media.Fluid('MEG', 0.)
        V_flow_borehole = 0.2  # Volumetric flow rate per borehole (L/s)
        # Total fluid mass flow rate per borehole (kg/s)
        m_flow_borehole = V_flow_borehole / 1000. * fluid.rho

        # Define a borehole
        borehole = gt.boreholes.Borehole(H, D, r_b, x=0., y=0.)

        single_u_tube = plat.borehole_heat_exchangers.SingleUTube(
            m_flow_borehole, fluid, borehole, pipe, grout, soil)

        radial_numerical = plat.radial_numerical_borehole.RadialNumericalBH(
            single_u_tube)
        radial_numerical.calc_sts_g_functions(single_u_tube)

        # Simulation start month and end month
        # --------------------------------
        # Simulation start month and end month
        start_month = 1
        n_years = 2
        end_month = n_years * 12
        # Maximum and minimum allowable fluid temperatures
        max_EFT_allowable = 35  # degrees Celsius
        min_EFT_allowable = 5  # degrees Celsius
        # Maximum and minimum allowable heights
        max_Height = 150  # in meters
        min_Height = 60  # in meters
        sim_params = plat.media.SimulationParameters(
            start_month, end_month, max_EFT_allowable, min_EFT_allowable,
            max_Height, min_Height)

        hybrid_load = plat.ground_loads.HybridLoad(
            hourly_rejection_loads, hourly_extraction_loads, single_u_tube,
            radial_numerical, sim_params)

        # Rejection
        monthly_cl = [0.0, 2985.279414548951, 7348.185264939054,
                      24242.4729437719, 38355.355848082654, 66819.12789289287,
                      92585.00987606372, 101198.14499566889, 113087.48169935631,
                      72806.64725332448, 36683.97513419995, 14823.049038232912,
                      6905.23604019025]
        monthly_avg_cl = [0.0, 4.012472331382999, 10.934799501397402,
                          32.583969010446104, 53.271327566781466,
                          89.81065577001729, 128.59029149453295,
                          136.0190120909528, 151.99930335934988,
                          101.12034340739511, 49.30641819112897,
                          20.58756810865682, 9.281231236814852]
        monthly_peak_cl = [0.0, 101.65464560000001, 168.583588315556,
                           249.85718963555598, 254.22101848, 337.1167684,
                           357.063188222222, 372.182726844444, 379.231087066667,
                           369.814712266667, 319.93987057777804, 187.06670408,
                           164.354865253333]
        monthly_peak_cl_day = [0, 30, 27, 29, 16, 29, 26, 5, 6, 6, 9, 1, 11]
        monthly_peak_cl_duration = [0, 3.22245060108821, 5.126440205637538,
                                    6.368473772044447, 5.866888088208792,
                                    6.536946837356036, 8.117874272909864,
                                    8.734652676505474, 6.858912895799893,
                                    6.878608686368384, 6.009657813517739,
                                    4.640038592513298, 4.210609563579387]

        assert np.allclose(monthly_avg_cl,
                           hybrid_load.rejection.monthly_average)
        assert np.allclose(monthly_cl, hybrid_load.rejection.monthly_total)
        assert np.allclose(monthly_peak_cl, hybrid_load.rejection.monthly_peak)
        assert np.allclose(monthly_peak_cl_day,
                           hybrid_load.rejection.monthly_peak_day)
        assert np.allclose(
            monthly_peak_cl_duration,
            hybrid_load.rejection.monthly_peak_duration)

        # Extraction
        monthly_avg_hl = [0, 15.459590754237224, 9.060390078577253,
                          0.6989300720989248, 0.2025507049590962,
                          0.0005207361557825568, 0.0, 0.0, 0.0, 0.0,
                          0.26110093017241937, 1.923909858140038,
                          6.383868764643993]
        monthly_hl = [0.0, 11501.935521152494, 6088.582132803914,
                      520.0039736416, 145.83650757054926, 0.3874276999022223,
                      0.0, 0.0, 0.0, 0.0, 194.25909204828, 1385.2150978608274,
                      4749.598360895131]
        monthly_peak_hl = [0, 175.98041008888902, 180.00339723111102,
                           44.3234887022222, 45.4052141733333,
                           0.300107748488889, 0.0, 0.0, 0.0, 0.0,
                           44.4398379333333, 111.84531427555599,
                           149.047468048889]
        monthly_peak_hl_day = [0, 8, 12, 22, 5, 9, 0, 0, 0, 0, 25, 21, 17]
        monthly_peak_hl_duration = [0, 1.8090666356305745, 1.746491266660888,
                                    1.1120772017895622, 1.000230503430525, 1.0,
                                    1e-06, 1e-06, 1e-06, 1e-06,
                                    1.006871025624677, 1.2967131390255886,
                                    1.3801204845572526]

        assert np.allclose(monthly_avg_hl, hybrid_load.extraction.monthly_average)
        assert np.allclose(monthly_hl, hybrid_load.extraction.monthly_total)
        assert np.allclose(monthly_peak_hl, hybrid_load.extraction.monthly_peak)
        assert np.allclose(monthly_peak_hl_day, hybrid_load.extraction.monthly_peak_day)
        assert np.allclose(
            monthly_peak_hl_duration, hybrid_load.extraction.monthly_peak_duration)

        load = [0.0, 0.0, -11.537532507642043, -175.98041008888902, -11.537532507642043, 101.65464560000001, -11.537532507642043, 1.0670800239540899, -180.00339723111102, 1.0670800239540899, 168.583588315556, 1.0670800239540899, 30.115363799009533, -44.3234887022222, 30.115363799009533, 249.85718963555598, 30.115363799009533, 51.55203148541769, -45.4052141733333, 51.55203148541769, 254.22101848, 51.55203148541769, 87.73736293008501, -0.300107748488889, 87.73736293008501, 337.1167684, 87.73736293008501, 125.98492459825971, 357.063188222222, 125.98492459825971, 133.2134835869092, 372.182726844444, 133.2134835869092, 149.88496881880292, 379.231087066667, 149.88496881880292, 98.52857804514667, 369.814712266667, 98.52857804514667, 46.96405474298904, 319.93987057777804, 46.96405474298904, -44.4398379333333, 46.96405474298904, 17.806361738205386, 187.06670408, 17.806361738205386, -111.84531427555599, 17.806361738205386, 2.2606798744185848, 164.354865253333, 2.2606798744185848, -149.047468048889, 2.2606798744185848, -11.537532507642043, -175.98041008888902, -11.537532507642043, 101.65464560000001, -11.537532507642043, 1.0670800239540899, -180.00339723111102, 1.0670800239540899, 168.583588315556, 1.0670800239540899, 30.115363799009533, -44.3234887022222, 30.115363799009533, 249.85718963555598, 30.115363799009533, 51.55203148541769, -45.4052141733333, 51.55203148541769, 254.22101848, 51.55203148541769, 87.73736293008501, -0.300107748488889, 87.73736293008501, 337.1167684, 87.73736293008501, 125.98492459825971, 357.063188222222, 125.98492459825971, 133.2134835869092, 372.182726844444, 133.2134835869092, 149.88496881880292, 379.231087066667, 149.88496881880292, 98.52857804514667, 369.814712266667, 98.52857804514667, 46.96405474298904, 319.93987057777804, 46.96405474298904, -44.4398379333333, 46.96405474298904, 17.806361738205386, 187.06670408, 17.806361738205386, -111.84531427555599]
        hour = [0.0, 0.0, 180.0954666821847, 181.9045333178153, 707.3887746994559, 710.6112253005441, 744.0, 1020.1267543666695, 1021.8732456333304, 1378.4367798971812, 1383.5632201028186, 1416.0, 1932.4439613991053, 1933.556038600895, 2097.815763113978, 2104.1842368860225, 2160.0, 2268.499884748285, 2269.500115251715, 2530.0665559558956, 2535.9334440441044, 2880.0, 3084.5, 3085.5, 3561.7315265813218, 3568.268473418678, 3624.0, 4232.941062863545, 4241.058937136455, 4344.0, 4448.6326736617475, 4457.367326338253, 5088.0, 5217.5705435521, 5224.4294564479005, 5832.0, 5961.560695656815, 5968.439304343184, 6552.0, 6753.995171093241, 6760.004828906759, 7140.496564487187, 7141.503435512812, 7296.0, 7306.679980703743, 7311.320019296257, 7788.3516434304875, 7789.648356569513, 8016.0, 8266.89469521821, 8271.10530478179, 8412.30993975772, 8413.690060242277, 8760.0, 8940.095466682185, 8941.904533317816, 9467.388774699455, 9470.611225300543, 9504.0, 9780.126754366669, 9781.87324563333, 10138.436779897182, 10143.563220102818, 10176.0, 10692.443961399105, 10693.556038600895, 10857.815763113978, 10864.184236886023, 10920.0, 11028.499884748284, 11029.500115251714, 11290.066555955895, 11295.933444044103, 11640.0, 11844.5, 11845.5, 12321.731526581321, 12328.268473418677, 12384.0, 12992.941062863545, 13001.058937136455, 13104.0, 13208.632673661747, 13217.367326338252, 13848.0, 13977.5705435521, 13984.429456447899, 14592.0, 14721.560695656815, 14728.439304343185, 15312.0, 15513.995171093242, 15520.00482890676, 15900.496564487188, 15901.503435512814, 16056.0, 16066.679980703744, 16071.320019296258, 16548.351643430487, 16549.648356569513]
        sfload = [0.0, 0.0, -11.537532507642043, -164.44287758124696, 164.44287758124696, 113.19217810764205, -113.19217810764205, 12.604612531596132, -181.0704772550651, 181.0704772550651, 167.51650829160192, -167.51650829160192, 29.04828377505544, -74.43885250123174, 74.43885250123174, 219.74182583654644, -219.74182583654644, 21.43666768640816, -96.95724565875099, 96.95724565875099, 202.6689869945823, -202.6689869945823, 36.18533144466732, -88.0374706785739, 88.0374706785739, 249.379405469915, -249.379405469915, 38.2475616681747, 231.07826362396227, -231.07826362396227, 7.228558988649496, 238.9692432575348, -238.9692432575348, 16.671485231893712, 229.34611824786407, -229.34611824786407, -51.356390773656244, 271.28613422152034, -271.28613422152034, -51.56452330215763, 272.975815834789, -272.975815834789, -91.40389267632234, 91.40389267632234, -29.157693004783656, 169.2603423417946, -169.2603423417946, -129.65167601376137, 129.65167601376137, -15.5456818637868, 162.09418537891443, -162.09418537891443, -151.30814792330756, 151.30814792330756, -13.798212382060628, -164.44287758124696, 164.44287758124696, 113.19217810764205, -113.19217810764205, 12.604612531596132, -181.0704772550651, 181.0704772550651, 167.51650829160192, -167.51650829160192, 29.04828377505544, -74.43885250123174, 74.43885250123174, 219.74182583654644, -219.74182583654644, 21.43666768640816, -96.95724565875099, 96.95724565875099, 202.6689869945823, -202.6689869945823, 36.18533144466732, -88.0374706785739, 88.0374706785739, 249.379405469915, -249.379405469915, 38.2475616681747, 231.07826362396227, -231.07826362396227, 7.228558988649496, 238.9692432575348, -238.9692432575348, 16.671485231893712, 229.34611824786407, -229.34611824786407, -51.356390773656244, 271.28613422152034, -271.28613422152034, -51.56452330215763, 272.975815834789, -272.975815834789, -91.40389267632234, 91.40389267632234, -29.157693004783656, 169.2603423417946, -169.2603423417946, -129.65167601376137]
        
        assert np.allclose(load, list(hybrid_load.load)[0:len(load)])
        assert np.allclose(hour, list(hybrid_load.hour)[0:len(hour)])
        assert np.allclose(sfload, list(hybrid_load.sfload)[0:len(sfload)])
